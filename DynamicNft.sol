// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4;

import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/utils/Counters.sol";

contract MyToken is ERC721, ERC721URIStorage, Ownable {
    using Counters for Counters.Counter;

    Counters.Counter private _tokenIdCounter;

    uint private interval;
    uint private lastTimeStamp;
    uint256 internal newVal;

    //metadata
    string[] ipfsURI = [
        "https://ipfs.io/ipfs/Qmd3F2PwZeCVL3RMwD4SqKPXnVrmJcYChPaWDmpTn9WTWc/0",
        "https://ipfs.io/ipfs/Qmd3F2PwZeCVL3RMwD4SqKPXnVrmJcYChPaWDmpTn9WTWc/1",
        "https://ipfs.io/ipfs/Qmd3F2PwZeCVL3RMwD4SqKPXnVrmJcYChPaWDmpTn9WTWc/2"
    ];

    constructor(uint _interval) ERC721("DynamicNFT", "dNFT") {
        interval = _interval;
        lastTimeStamp = block.timestamp;    
    }

    function checkUpkeep(bytes calldata /* checkData */) external view  returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
    }

    function performUpkeep(bytes calldata /* performData */) external  {
        //We highly recommend revalidating the upkeep in the performUpkeep function
        if ((block.timestamp - lastTimeStamp) > interval ) {
            lastTimeStamp = block.timestamp;
           growPlant(0);
        }
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }

    function safeMint(address to) public onlyOwner {
        uint256 tokenId = _tokenIdCounter.current();
        _tokenIdCounter.increment();
        _safeMint(to, tokenId);
        _setTokenURI(tokenId, ipfsURI[0]);
    }

    function growPlant(uint256 _tokenId) public{
        if(plantStage(_tokenId) >=2){return;}
        newVal = plantStage(_tokenId) + 1;
        string memory newURI = ipfsURI[newVal];
        _setTokenURI(_tokenId, newURI);
    }

    function plantStage(uint256 _tokenId) public view returns(uint256){
        string memory _uri = tokenURI(_tokenId);
        return newVal;
    }

    // The following functions are overrides required by Solidity.

    function _burn(uint256 tokenId) internal override(ERC721, ERC721URIStorage) {
        super._burn(tokenId);
    }

    function tokenURI(uint256 tokenId)
        public
        view
        override(ERC721, ERC721URIStorage)
        returns (string memory)
    {
        return super.tokenURI(tokenId);
    }
}